/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.course.service.base;

import com.liferay.course.model.CourseRegister;
import com.liferay.course.service.CourseRegisterLocalService;
import com.liferay.course.service.persistence.CoursePersistence;
import com.liferay.course.service.persistence.CourseRegisterPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the course register local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.course.service.impl.CourseRegisterLocalServiceImpl}.
 * </p>
 *
 * @author ces
 * @see com.liferay.course.service.impl.CourseRegisterLocalServiceImpl
 * @see com.liferay.course.service.CourseRegisterLocalServiceUtil
 * @generated
 */
public abstract class CourseRegisterLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements CourseRegisterLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.course.service.CourseRegisterLocalServiceUtil} to access the course register local service.
	 */

	/**
	 * Adds the course register to the database. Also notifies the appropriate model listeners.
	 *
	 * @param courseRegister the course register
	 * @return the course register that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CourseRegister addCourseRegister(CourseRegister courseRegister)
		throws SystemException {
		courseRegister.setNew(true);

		return courseRegisterPersistence.update(courseRegister);
	}

	/**
	 * Creates a new course register with the primary key. Does not add the course register to the database.
	 *
	 * @param courseRegisterId the primary key for the new course register
	 * @return the new course register
	 */
	@Override
	public CourseRegister createCourseRegister(long courseRegisterId) {
		return courseRegisterPersistence.create(courseRegisterId);
	}

	/**
	 * Deletes the course register with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param courseRegisterId the primary key of the course register
	 * @return the course register that was removed
	 * @throws PortalException if a course register with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CourseRegister deleteCourseRegister(long courseRegisterId)
		throws PortalException, SystemException {
		return courseRegisterPersistence.remove(courseRegisterId);
	}

	/**
	 * Deletes the course register from the database. Also notifies the appropriate model listeners.
	 *
	 * @param courseRegister the course register
	 * @return the course register that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CourseRegister deleteCourseRegister(CourseRegister courseRegister)
		throws SystemException {
		return courseRegisterPersistence.remove(courseRegister);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CourseRegister.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return courseRegisterPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.course.model.impl.CourseRegisterModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return courseRegisterPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.course.model.impl.CourseRegisterModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return courseRegisterPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return courseRegisterPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return courseRegisterPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CourseRegister fetchCourseRegister(long courseRegisterId)
		throws SystemException {
		return courseRegisterPersistence.fetchByPrimaryKey(courseRegisterId);
	}

	/**
	 * Returns the course register with the matching UUID and company.
	 *
	 * @param uuid the course register's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching course register, or <code>null</code> if a matching course register could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public CourseRegister fetchCourseRegisterByUuidAndCompanyId(String uuid,
		long companyId) throws SystemException {
		return courseRegisterPersistence.fetchByUuid_C_First(uuid, companyId,
			null);
	}

	/**
	 * Returns the course register matching the UUID and group.
	 *
	 * @param uuid the course register's UUID
	 * @param groupId the primary key of the group
	 * @return the matching course register, or <code>null</code> if a matching course register could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public CourseRegister fetchCourseRegisterByUuidAndGroupId(String uuid,
		long groupId) throws SystemException {
		return courseRegisterPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the course register with the primary key.
	 *
	 * @param courseRegisterId the primary key of the course register
	 * @return the course register
	 * @throws PortalException if a course register with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public CourseRegister getCourseRegister(long courseRegisterId)
		throws PortalException, SystemException {
		return courseRegisterPersistence.findByPrimaryKey(courseRegisterId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return courseRegisterPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the course register with the matching UUID and company.
	 *
	 * @param uuid the course register's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching course register
	 * @throws PortalException if a matching course register could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public CourseRegister getCourseRegisterByUuidAndCompanyId(String uuid,
		long companyId) throws PortalException, SystemException {
		return courseRegisterPersistence.findByUuid_C_First(uuid, companyId,
			null);
	}

	/**
	 * Returns the course register matching the UUID and group.
	 *
	 * @param uuid the course register's UUID
	 * @param groupId the primary key of the group
	 * @return the matching course register
	 * @throws PortalException if a matching course register could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public CourseRegister getCourseRegisterByUuidAndGroupId(String uuid,
		long groupId) throws PortalException, SystemException {
		return courseRegisterPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the course registers.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.course.model.impl.CourseRegisterModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of course registers
	 * @param end the upper bound of the range of course registers (not inclusive)
	 * @return the range of course registers
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<CourseRegister> getCourseRegisters(int start, int end)
		throws SystemException {
		return courseRegisterPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of course registers.
	 *
	 * @return the number of course registers
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getCourseRegistersCount() throws SystemException {
		return courseRegisterPersistence.countAll();
	}

	/**
	 * Updates the course register in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param courseRegister the course register
	 * @return the course register that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CourseRegister updateCourseRegister(CourseRegister courseRegister)
		throws SystemException {
		return courseRegisterPersistence.update(courseRegister);
	}

	/**
	 * Returns the course local service.
	 *
	 * @return the course local service
	 */
	public com.liferay.course.service.CourseLocalService getCourseLocalService() {
		return courseLocalService;
	}

	/**
	 * Sets the course local service.
	 *
	 * @param courseLocalService the course local service
	 */
	public void setCourseLocalService(
		com.liferay.course.service.CourseLocalService courseLocalService) {
		this.courseLocalService = courseLocalService;
	}

	/**
	 * Returns the course remote service.
	 *
	 * @return the course remote service
	 */
	public com.liferay.course.service.CourseService getCourseService() {
		return courseService;
	}

	/**
	 * Sets the course remote service.
	 *
	 * @param courseService the course remote service
	 */
	public void setCourseService(
		com.liferay.course.service.CourseService courseService) {
		this.courseService = courseService;
	}

	/**
	 * Returns the course persistence.
	 *
	 * @return the course persistence
	 */
	public CoursePersistence getCoursePersistence() {
		return coursePersistence;
	}

	/**
	 * Sets the course persistence.
	 *
	 * @param coursePersistence the course persistence
	 */
	public void setCoursePersistence(CoursePersistence coursePersistence) {
		this.coursePersistence = coursePersistence;
	}

	/**
	 * Returns the course register local service.
	 *
	 * @return the course register local service
	 */
	public com.liferay.course.service.CourseRegisterLocalService getCourseRegisterLocalService() {
		return courseRegisterLocalService;
	}

	/**
	 * Sets the course register local service.
	 *
	 * @param courseRegisterLocalService the course register local service
	 */
	public void setCourseRegisterLocalService(
		com.liferay.course.service.CourseRegisterLocalService courseRegisterLocalService) {
		this.courseRegisterLocalService = courseRegisterLocalService;
	}

	/**
	 * Returns the course register remote service.
	 *
	 * @return the course register remote service
	 */
	public com.liferay.course.service.CourseRegisterService getCourseRegisterService() {
		return courseRegisterService;
	}

	/**
	 * Sets the course register remote service.
	 *
	 * @param courseRegisterService the course register remote service
	 */
	public void setCourseRegisterService(
		com.liferay.course.service.CourseRegisterService courseRegisterService) {
		this.courseRegisterService = courseRegisterService;
	}

	/**
	 * Returns the course register persistence.
	 *
	 * @return the course register persistence
	 */
	public CourseRegisterPersistence getCourseRegisterPersistence() {
		return courseRegisterPersistence;
	}

	/**
	 * Sets the course register persistence.
	 *
	 * @param courseRegisterPersistence the course register persistence
	 */
	public void setCourseRegisterPersistence(
		CourseRegisterPersistence courseRegisterPersistence) {
		this.courseRegisterPersistence = courseRegisterPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.course.model.CourseRegister",
			courseRegisterLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.course.model.CourseRegister");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return CourseRegister.class;
	}

	protected String getModelClassName() {
		return CourseRegister.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = courseRegisterPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.course.service.CourseLocalService.class)
	protected com.liferay.course.service.CourseLocalService courseLocalService;
	@BeanReference(type = com.liferay.course.service.CourseService.class)
	protected com.liferay.course.service.CourseService courseService;
	@BeanReference(type = CoursePersistence.class)
	protected CoursePersistence coursePersistence;
	@BeanReference(type = com.liferay.course.service.CourseRegisterLocalService.class)
	protected com.liferay.course.service.CourseRegisterLocalService courseRegisterLocalService;
	@BeanReference(type = com.liferay.course.service.CourseRegisterService.class)
	protected com.liferay.course.service.CourseRegisterService courseRegisterService;
	@BeanReference(type = CourseRegisterPersistence.class)
	protected CourseRegisterPersistence courseRegisterPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private CourseRegisterLocalServiceClpInvoker _clpInvoker = new CourseRegisterLocalServiceClpInvoker();
}